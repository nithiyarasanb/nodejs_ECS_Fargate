name: Build and Deploy to AWS ECS

on:
  push:
    branches:
      - main  # Trigger workflow on pushes to the main branch

jobs:
  build-and-deploy:
    name: Build and Deploy to AWS ECS
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build and push Docker image to Amazon ECR
      - name: Build and Push Docker Image
        env:
          ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
        run: |
          echo "Building the Docker image..."
          docker build -t $ECR_REPO_NAME -f ./App/Dockerfile .

          echo "Tagging the Docker image..."
          docker tag $ECR_REPO_NAME:latest ${{ steps.ecr-login.outputs.registry }}/$ECR_REPO_NAME:latest

          echo "Pushing the Docker image to Amazon ECR..."
          docker push ${{ steps.ecr-login.outputs.registry }}/$ECR_REPO_NAME:latest

      # Step 5: Deploy to ECS
      - name: Deploy to AWS ECS
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
          ECR_IMAGE: ${{ steps.ecr-login.outputs.registry }}/${{ secrets.ECR_REPO_NAME }}:latest
        run: |
          echo "Deploying the updated image to ECS..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment

      # Step 6: Verify Deployment
      - name: Verify ECS Deployment
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          echo "Checking ECS service status..."
          aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query "services[0].deployments"
